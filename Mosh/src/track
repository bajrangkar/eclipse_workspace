mosh.concurrency

01 - SampleMain						Printing available processors count
02 - ThreadDemo						Running 10 threads
03 - ThreadJoinDemo					Adding a thread after a thread finish executing
   - DownloadFileTask				It waits for the thread to complete
04 - ThreadInterruptDemo			Interrupt a thread after 1 second
   - DownloadFileInterruptTask		Running thread should constantly checking for interrupt
									If the interrupt check is not there, stopping thread is not guaranteed

mosh.concurrency.race
05 - ThreadRaceDemo					10 threads run to download 10000 bytes each
   - DownloadFileRaceTask			each thread runs this task
   - DownloadStatus					10k*10 = 1L bytes count should be the result
									But it is not because ++ operator has 3steps.
									Multiple threads write the same value back to memory, resulting loss in count. 66163

mosh.concurrency.race.atomic									
06 - ThreadRaceAtomicDemo			10 threads run to download 10000 bytes each
   - DownloadFileRaceAtomicTask		each thread runs this task
   - DownloadAtomicStatus			10k*10 = 1L bytes count should be the result
									It is not loosing count due to AtomicInteger

mosh.concurrency.race.adder
07 - ThreadRaceAdderDemo			10 threads run to download 10000 bytes each
   - DownloadFileRaceAdderTask		each thread runs this task
   - DownloadAdderStatus			10k*10 = 1L bytes count should be the result
									It is not loosing count due to LongAdder

mosh.executor
08 - ExecutorDemo					Thread pool of 2 threads
   - ExecutorDemo01					executor.submit to start a thread 
   - ExecutorDemo02					executor.shutdown
   - ExecutorDemo03					executor.shutdown in finally
   - ExecutorDemo04					future.get is a blocking operation

mosh.executor.completablefuture		Asynchronous Programming

09 - CompletableFutureDemo01		CompletableFuture.runAsync

10 - CompletableFutureDemo02		CompletableFuture.supplyAsync

11 - CompletableFutureDemo03		MailService.send is synchronous. blocking thread
   - MailService03

12 - CompletableFutureDemo04		MailService.sendAsync
   - MailService04

13 - CompletableFutureDemo05 		future.thenAcceptAsync




 